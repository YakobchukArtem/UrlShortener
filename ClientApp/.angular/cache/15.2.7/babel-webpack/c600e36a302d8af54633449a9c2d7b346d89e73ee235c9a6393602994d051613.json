{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/api-authorization/authorize.service\";\nimport * as i4 from \"@angular/common\";\nfunction UrlTableComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 2);\n    i0.ɵɵlistener(\"click\", function UrlTableComponent_tr_11_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const url_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openUrl(url_r1));\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function UrlTableComponent_tr_11_Template_button_click_8_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const url_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteUrl($event, url_r1.id));\n    });\n    i0.ɵɵtext(9, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const url_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(url_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(url_r1.longForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(url_r1.shortForm);\n  }\n}\nexport class UrlTableComponent {\n  constructor(http, baseUrl, router, authorizeService) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.router = router;\n    this.authorizeService = authorizeService;\n    this.urls = [];\n    this.fetchUrls();\n  }\n  fetchUrls() {\n    this.http.get(this.baseUrl + 'api/url').subscribe(result => {\n      this.urls = result;\n    }, error => console.error(error));\n  }\n  openUrl(url) {\n    console.log(\"open\");\n    this.router.navigate(['/url-info', url.id]);\n  }\n  deleteUrl(event, id) {\n    event.stopPropagation();\n    this.authorizeService.isAuthenticated().subscribe(authenticated => {\n      if (authenticated) {\n        this.http.delete(this.baseUrl + 'api/url/' + id).subscribe(() => {\n          console.log('URL with ID ' + id + ' deleted successfully');\n          this.fetchUrls();\n        }, error => {\n          console.error('Error deleting URL:', error);\n        });\n      } else {\n        console.log('User is not authenticated');\n      }\n    });\n  }\n}\nUrlTableComponent.ɵfac = function UrlTableComponent_Factory(t) {\n  return new (t || UrlTableComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthorizeService));\n};\nUrlTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UrlTableComponent,\n  selectors: [[\"app-url-table\"]],\n  decls: 12,\n  vars: 1,\n  consts: [[1, \"table\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"]],\n  template: function UrlTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\")(2, \"tr\")(3, \"th\");\n      i0.ɵɵtext(4, \"ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"th\");\n      i0.ɵɵtext(6, \"Long Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"th\");\n      i0.ɵɵtext(8, \"Short Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"th\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"tbody\");\n      i0.ɵɵtemplate(11, UrlTableComponent_tr_11_Template, 10, 3, \"tr\", 1);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.urls);\n    }\n  },\n  dependencies: [i4.NgForOf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;;IAUQA,6BAAoD;IAAvBA;MAAA;MAAA;MAAA;MAAA,OAASA,qCAAY;IAAA,EAAC;IAC/CA,0BAAI;IAAAA,YAAY;IAAAA,iBAAK;IACrBA,0BAAI;IAAAA,YAAkB;IAAAA,iBAAK;IAC3BA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;IAC5BA,0BAAI;IACsCA;MAAA;MAAA;MAAA;MAAA,OAASA,kDAAyB;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;;;;IAJzFA,eAAY;IAAZA,+BAAY;IACZA,eAAkB;IAAlBA,qCAAkB;IAClBA,eAAmB;IAAnBA,sCAAmB;;;ACHnC,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB,EAA8BC,OAAe,EAAUC,MAAc,EAAUC,gBAAkC;IAAjI,SAAI,GAAJH,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAAkB,WAAM,GAANC,MAAM;IAAkB,qBAAgB,GAAhBC,gBAAgB;IAF5H,SAAI,GAAc,EAAE;IAGzB,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACJ,OAAO,GAAG,SAAS,CAAC,CAACK,SAAS,CAACC,MAAM,IAAG;MACpE,IAAI,CAACC,IAAI,GAAGD,MAAM;IACpB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEAE,OAAO,CAACC,GAAY;IAClBF,OAAO,CAACG,GAAG,CAAC,MAAM,CAAC;IACnB,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,WAAW,EAAEF,GAAG,CAACG,EAAE,CAAC,CAAC;EAC7C;EAEAC,SAAS,CAACC,KAAiB,EAAEF,EAAU;IACrCE,KAAK,CAACC,eAAe,EAAE;IAEvB,IAAI,CAACf,gBAAgB,CAACgB,eAAe,EAAE,CAACb,SAAS,CAACc,aAAa,IAAG;MAChE,IAAIA,aAAa,EAAE;QACjB,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAC,IAAI,CAACpB,OAAO,GAAG,UAAU,GAAGc,EAAE,CAAC,CAACT,SAAS,CACxD,MAAK;UACHI,OAAO,CAACG,GAAG,CAAC,cAAc,GAAGE,EAAE,GAAG,uBAAuB,CAAC;UAC1D,IAAI,CAACX,SAAS,EAAE;QAClB,CAAC,EACDK,KAAK,IAAG;UACNC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC7C,CAAC,CACF;OACF,MAAM;QACLC,OAAO,CAACG,GAAG,CAAC,2BAA2B,CAAC;;IAE5C,CAAC,CAAC;EACJ;;AApCWf,iBAAiB;mBAAjBA,iBAAiB,4DAGkB,UAAU;AAAA;AAH7CA,iBAAiB;QAAjBA,iBAAiB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDV9B7B,gCAAqB;MAGLA,kBAAE;MAAAA,iBAAK;MACXA,0BAAI;MAAAA,yBAAS;MAAAA,iBAAK;MAClBA,0BAAI;MAAAA,0BAAU;MAAAA,iBAAK;MACnBA,qBAAS;MACbA,iBAAK;MAETA,8BAAO;MACHA,mEAOK;MACTA,iBAAQ;;;MARgBA,gBAAO;MAAPA,kCAAO","names":["i0","UrlTableComponent","constructor","http","baseUrl","router","authorizeService","fetchUrls","get","subscribe","result","urls","error","console","openUrl","url","log","navigate","id","deleteUrl","event","stopPropagation","isAuthenticated","authenticated","delete","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\Task for Inforce\\UrlShortener\\ClientApp\\src\\app\\url-table\\url-table.component.html","D:\\Task for Inforce\\UrlShortener\\ClientApp\\src\\app\\url-table\\url-table.component.ts"],"sourcesContent":["<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th>ID</th>\r\n            <th>Long Form</th>\r\n            <th>Short Form</th>\r\n            <th></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let url of urls\" (click)=\"openUrl(url)\">\r\n            <td>{{ url.id }}</td>\r\n            <td>{{ url.longForm }}</td>\r\n            <td>{{ url.shortForm }}</td>\r\n            <td>\r\n                <button class=\"btn btn-danger btn-sm\" (click)=\"deleteUrl($event, url.id)\">Delete</button>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthorizeService } from 'src/api-authorization/authorize.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-url-table',\r\n  templateUrl: './url-table.component.html'\r\n})\r\nexport class UrlTableComponent {\r\n  public urls: UrlLink[] = [];\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string, private router: Router, private authorizeService: AuthorizeService) {\r\n    this.fetchUrls();\r\n  }\r\n\r\n  fetchUrls() {\r\n    this.http.get<UrlLink[]>(this.baseUrl + 'api/url').subscribe(result => {\r\n      this.urls = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  openUrl(url: UrlLink) {\r\n    console.log(\"open\");\r\n    this.router.navigate(['/url-info', url.id]);\r\n  }\r\n\r\n  deleteUrl(event: MouseEvent, id: string) {\r\n    event.stopPropagation();\r\n\r\n    this.authorizeService.isAuthenticated().subscribe(authenticated => {\r\n      if (authenticated) {\r\n        this.http.delete(this.baseUrl + 'api/url/' + id).subscribe(\r\n          () => {\r\n            console.log('URL with ID ' + id + ' deleted successfully');\r\n            this.fetchUrls();\r\n          },\r\n          error => {\r\n            console.error('Error deleting URL:', error);\r\n          }\r\n        );\r\n      } else {\r\n        console.log('User is not authenticated');\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\ninterface UrlLink {\r\n  id: string;\r\n  longForm: string;\r\n  shortForm: string;\r\n  createdBy: string;\r\n  createdAt: Date;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}